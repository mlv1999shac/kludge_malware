#!/usr/bin/env python

import scapy.all as scapy
import sys
from time import time
import subprocess


subnet = subprocess.check_output("ip route",shell=True)
subnet_ = str(subnet)
subnet = subnet_.split("\n")[1].split(" ")[0]
router_ip = subnet_.split(" ")[2]
_my_ip_ = subnet_.split("\n")[1].split(" ")[8]


def scan(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_broadcast_request = broadcast / arp_request
    response = scapy.srp(arp_broadcast_request, timeout=1, verbose=False)[0]
    try:
        mac = response[0][1].hwsrc

    except IndexError:
        scan(router_ip)

    return mac


def get_hacker_ip_(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_broadcast_request = broadcast / arp_request

    return scapy.srp(arp_broadcast_request, timeout=1, verbose=False)[0]


def ip_mac_mapping(answer_list):
    client_list = []

    for element in answer_list:

        mapping = {'ip': element[1].psrc, 'mac': element[1].hwsrc}
        client_list.append(mapping)

    return client_list







mac = scan(router_ip)
answered = get_hacker_ip_(subnet)
ip_mac_ = ip_mac_mapping(answered)

t0=time()
print("")
print("[+] ARP Spoof Detector Script By SAI MAHIDHAR...........")
print("[+] Running..........")
print("[+] Conformed Legitimate router gateway :: "+ mac)
print("[+] Network Scan done to find out the INSIDER (arp spoofer)")
print("[+] Router IP : "+router_ip)
print("[+] Subnet :: " + subnet)
print("[+] Number of Active Devices :: " + str(len(ip_mac_)))
print("[+] Time taken to  gather information :: " + str(time() - t0) + " seconds")
print("[+] ARP SPOOF DETECTOR is ready to take on the INSIDER ")
t0=time()
print("[+] Re-checking Details of router ............")
mac = scan("192.168.104.1")
print("[+] Successfully Done ....Confirmed in "+str(time() -t0 )  + " seconds" )
print("[+] VULCHAR  takes the charge ..................")
print("[+] Script By SAI MAHIDHAR  running on " + _my_ip_)
print("\n\n")






def call_back_function(packet):

    if packet.haslayer(scapy.ARP):
        if str(packet[scapy.ARP].psrc) == router_ip and str(packet[scapy.ARP].pdst) == _my_ip_:
            packet_hwscr = str(packet[scapy.ARP].hwsrc)
            if packet_hwscr != mac:
                call_back_function.counter += 1
                hacker_ip = ""
                for i in ip_mac_:
                    if i['mac'] == packet_hwscr:
                        hacker_ip = i['ip']
                        break

                print("\r[++] *ARP Spoof detected* " + "[+]ARPSpoofing by "+ hacker_ip + " [+]Changing gatewaay MAC :: "+ mac + " to :: " + packet_hwscr + " [+]ARP packets received :: " +str(call_back_function.counter)),
                sys.stdout.flush()



call_back_function.counter = 0
scapy.sniff(iface = 'eth0' , store=False , prn = call_back_function)


